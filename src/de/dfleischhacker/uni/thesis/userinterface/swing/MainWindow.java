/*
 *
 * MainWindow.java
 *
 * Software License Agreement (BSD License)
 *
 * Copyright (c) 2009 Daniel Fleischhacker <dev@dfleischhacker.de>
 * All rights reserved.
 *
 * Redistribution and use of this software in source and binary forms, with or
 * without modification, are permitted provided that the following conditions
 * are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package de.dfleischhacker.uni.thesis.userinterface.swing;

import java.io.File;
import java.net.URI;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import de.dfleischhacker.uni.thesis.utils.alignment.AlignmentManager;
import de.dfleischhacker.uni.thesis.utils.ontology.OntologyManager;
import de.dfleischhacker.uni.thesis.utils.wrapper.CalculationResult;
import de.dfleischhacker.uni.thesis.utils.wrapper.Wrapper;
import de.dfleischhacker.uni.thesis.utils.wrapper.WrapperException;
import javax.swing.UIManager;

/**
 *
 * @author Daniel Fleischhacker <dev@dfleischhacker.de>
 */
public class MainWindow extends javax.swing.JFrame {
	// constant containing name of null semantic
	public final String NULL_SEMANTIC = "Null Semantic (Classical Precision & Recall)";

	// save the values already got from user
	private File referenceAlignmentFile;
	private File alignmentFile;
	private URI firstOntologyURI;
	private URI secondOntologyURI;
	private String semanticName;
	private CalculationResult res;

	private File lastLoadPath;
	private File lastSavePath;

	/** Creates new form MainWindow */
	public MainWindow() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        firstOntologyFileName = new javax.swing.JTextField();
        loadFirstOntologyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        secondOntologyFileName = new javax.swing.JTextField();
        loadSecondOntologyButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        referenceAlignmentFileName = new javax.swing.JTextField();
        loadReferenceAlignmentButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        alignmentFileName = new javax.swing.JTextField();
        loadAlignmentButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        semanticChooser = new javax.swing.JComboBox();
        computeButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        precisionValue = new javax.swing.JTextField();
        recallValue = new javax.swing.JTextField();
        referenceAlignmentStats = new javax.swing.JTextField();
        alignmentStats = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        intersectionSize = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        saveReferenceAlignmentClosureButton = new javax.swing.JButton();
        saveAlignmentClosureButton = new javax.swing.JButton();
        saveMergedReferenceOntologyButton = new javax.swing.JButton();
        saveMergedOntologyButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        inspectAlignButton = new javax.swing.JButton();
        inspectAlignClosureButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Semantic Precision and Recall Calculator");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ontologies"));

        jLabel1.setText("Please load the ontologies to use for evaluation");

        jLabel2.setText("First Ontology:");

        firstOntologyFileName.setEditable(false);

        loadFirstOntologyButton.setText("Choose");
        loadFirstOntologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFirstOntologyButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Second Ontology:");

        secondOntologyFileName.setEditable(false);

        loadSecondOntologyButton.setText("Choose");
        loadSecondOntologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSecondOntologyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(265, 265, 265))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondOntologyFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                            .addComponent(firstOntologyFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadFirstOntologyButton)
                            .addComponent(loadSecondOntologyButton))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(firstOntologyFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadFirstOntologyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(secondOntologyFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadSecondOntologyButton))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Alignments"));

        jLabel4.setText("Now please load the reference alignment and the one to evaluate");

        jLabel5.setText("Reference Alignment:");

        referenceAlignmentFileName.setEditable(false);

        loadReferenceAlignmentButton.setText("Choose");
        loadReferenceAlignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadReferenceAlignmentButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Alignment:");

        alignmentFileName.setEditable(false);

        loadAlignmentButton.setText("Choose");
        loadAlignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAlignmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alignmentFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                            .addComponent(referenceAlignmentFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadReferenceAlignmentButton)
                            .addComponent(loadAlignmentButton))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(referenceAlignmentFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadReferenceAlignmentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(alignmentFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadAlignmentButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Semantic"));

        jLabel7.setText("Finally choose a semantic to use and start the computation");

        semanticChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Natural Semantic", "Pragmatic Semantic", "Null Semantic (Classical Precision & Recall)" }));

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(semanticChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(computeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                    .addComponent(jLabel7))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(semanticChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14));
        jLabel8.setText("Precision:");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14));
        jLabel10.setText("Recall:");

        jLabel12.setText("Reference Alignment Original/Closure:");

        jLabel13.setText("Alignment Original/Closure:");

        precisionValue.setEditable(false);
        precisionValue.setFont(new java.awt.Font("Dialog", 0, 14));
        precisionValue.setText("?");

        recallValue.setEditable(false);
        recallValue.setFont(new java.awt.Font("Dialog", 0, 14));
        recallValue.setText("?");

        referenceAlignmentStats.setEditable(false);
        referenceAlignmentStats.setText("?");

        alignmentStats.setEditable(false);
        alignmentStats.setText("?");

        jLabel9.setText("Intersection Size:");

        intersectionSize.setEditable(false);
        intersectionSize.setText("?");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recallValue, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(precisionValue, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(referenceAlignmentStats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(alignmentStats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(intersectionSize, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(precisionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(referenceAlignmentStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(recallValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(alignmentStats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(intersectionSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5))))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Save..."));

        saveReferenceAlignmentClosureButton.setText("Reference Alignment Closure");
        saveReferenceAlignmentClosureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReferenceAlignmentClosureButtonActionPerformed(evt);
            }
        });

        saveAlignmentClosureButton.setText("Alignment Closure");
        saveAlignmentClosureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAlignmentClosureButtonActionPerformed(evt);
            }
        });

        saveMergedReferenceOntologyButton.setText("Merged Ontology for Reference Alignment");
        saveMergedReferenceOntologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMergedReferenceOntologyButtonActionPerformed(evt);
            }
        });

        saveMergedOntologyButton.setText("Merged Ontology for Alignment");
        saveMergedOntologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMergedOntologyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(saveAlignmentClosureButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveReferenceAlignmentClosureButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveMergedOntologyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(saveMergedReferenceOntologyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveReferenceAlignmentClosureButton)
                    .addComponent(saveMergedReferenceOntologyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAlignmentClosureButton)
                    .addComponent(saveMergedOntologyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aboutButton.setText("About...");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("View..."));

        inspectAlignButton.setText("Inspect Alignment");
        inspectAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspectAlignButtonActionPerformed(evt);
            }
        });

        inspectAlignClosureButton.setText("Inspect Alignment Closure");
        inspectAlignClosureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspectAlignClosureButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inspectAlignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inspectAlignClosureButton, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inspectAlignButton)
                    .addComponent(inspectAlignClosureButton))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aboutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 448, Short.MAX_VALUE)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aboutButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void loadFirstOntologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFirstOntologyButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastLoadPath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastLoadPath);
		}
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Ontology files", "rdf", "xml", "owl");
		fileChooser.setFileFilter(filter);
		int ret = fileChooser.showOpenDialog(this);
		if (ret == JFileChooser.APPROVE_OPTION) {
			firstOntologyURI = fileChooser.getSelectedFile().toURI();
			firstOntologyFileName.setText(fileChooser.getSelectedFile().getAbsolutePath().toString());
			if (firstOntologyURI != null && secondOntologyURI != null)
				setStateAlignmentPanel(true);
			lastLoadPath = fileChooser.getCurrentDirectory();
		}
	}//GEN-LAST:event_loadFirstOntologyButtonActionPerformed

	private void loadSecondOntologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSecondOntologyButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastLoadPath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastLoadPath);
		}
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Ontology files", "rdf", "xml", "owl");
		fileChooser.setFileFilter(filter);
		int ret = fileChooser.showOpenDialog(this);
		if (ret == JFileChooser.APPROVE_OPTION) {
			secondOntologyURI = fileChooser.getSelectedFile().toURI();
			secondOntologyFileName.setText(fileChooser.getSelectedFile().getAbsolutePath().toString());
			if (firstOntologyURI != null && secondOntologyURI != null)
				setStateAlignmentPanel(true);
			lastLoadPath = fileChooser.getCurrentDirectory();
		}
	}//GEN-LAST:event_loadSecondOntologyButtonActionPerformed

	private void loadReferenceAlignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadReferenceAlignmentButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastLoadPath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastLoadPath);
		}
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Alignment files", "rdf", "xml");
		fileChooser.setFileFilter(filter);
		int ret = fileChooser.showOpenDialog(this);
		if (ret == JFileChooser.APPROVE_OPTION) {
			referenceAlignmentFile = fileChooser.getSelectedFile();
			referenceAlignmentFileName.setText(referenceAlignmentFile.getAbsolutePath().toString());
			if (referenceAlignmentFile != null && alignmentFile != null)
				setStateSemanticPanel(true);
			lastLoadPath = fileChooser.getCurrentDirectory();
		}
	}//GEN-LAST:event_loadReferenceAlignmentButtonActionPerformed

	private void loadAlignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAlignmentButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastLoadPath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastLoadPath);
		}
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Alignment files", "rdf", "xml");
		fileChooser.setFileFilter(filter);
		int ret = fileChooser.showOpenDialog(this);
		if (ret == JFileChooser.APPROVE_OPTION) {
			alignmentFile = fileChooser.getSelectedFile();
			alignmentFileName.setText(alignmentFile.getAbsolutePath().toString());
			if (referenceAlignmentFile != null && alignmentFile != null)
				setStateSemanticPanel(true);
			lastLoadPath = fileChooser.getCurrentDirectory();
		}
	}//GEN-LAST:event_loadAlignmentButtonActionPerformed

	private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
		setVisible(false);
		System.exit(0);
	}//GEN-LAST:event_exitButtonActionPerformed

	private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
		JOptionPane.showMessageDialog(this,
			"Semantic Precision and Recall Calculator\n(c) 2009 Daniel Fleischhacker\n" +
			"This tool is provided under a 2-clause BSD license (see LICENSE file)\n" +
			"Bugtracker, Downloads and Source code at http://bitbucket.org/dfleischhacker/spart/",
			"About...", JOptionPane.INFORMATION_MESSAGE);
	}//GEN-LAST:event_aboutButtonActionPerformed

	private void saveReferenceAlignmentClosureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReferenceAlignmentClosureButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastSavePath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastSavePath);
		}
		int ret = fileChooser.showSaveDialog(this);

		if (ret == JFileChooser.APPROVE_OPTION) {
			lastSavePath = fileChooser.getCurrentDirectory();
			try {
				AlignmentManager.writeAlignment(
					fileChooser.getSelectedFile().getAbsolutePath().toString(),
					res.getReferenceClosure()
				);
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this,
					"Error saving alignment to file:\n" + ex.getMessage(),
					"Error saving file", JOptionPane.ERROR_MESSAGE
				);
			}
		}
	}//GEN-LAST:event_saveReferenceAlignmentClosureButtonActionPerformed

	private void saveAlignmentClosureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAlignmentClosureButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastSavePath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastSavePath);
		}
		int ret = fileChooser.showSaveDialog(this);

		if (ret == JFileChooser.APPROVE_OPTION) {
			lastSavePath = fileChooser.getCurrentDirectory();
			try {
				AlignmentManager.writeAlignment(
					fileChooser.getSelectedFile().getAbsolutePath().toString(),
					res.getEvaluationClosure()
				);
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this,
					"Error saving reference alignment to file:\n" + ex.getMessage(),
					"Error saving file", JOptionPane.ERROR_MESSAGE
				);
			}
		}
	}//GEN-LAST:event_saveAlignmentClosureButtonActionPerformed

	private void saveMergedReferenceOntologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMergedReferenceOntologyButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastSavePath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastSavePath);
		}
		int ret = fileChooser.showSaveDialog(this);

		if (ret == JFileChooser.APPROVE_OPTION) {
			lastSavePath = fileChooser.getCurrentDirectory();
			try {
				OntologyManager.writeOntology(
					res.getCombinedRefOntology(),
					fileChooser.getSelectedFile().getAbsolutePath().toString()
				);
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this,
						"Error saving merged reference ontology to file:\n" + ex.getMessage()
						, "Error saving file", JOptionPane.ERROR_MESSAGE);
			}
		}
}//GEN-LAST:event_saveMergedReferenceOntologyButtonActionPerformed

	private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
		setStateSavePanel(false);
		setStateViewPanel(false);
		
		try {
			Wrapper.checkOntology1(firstOntologyURI);
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error loading first ontology",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}
		try {
			Wrapper.checkOntology2(secondOntologyURI);
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error loading second ontology",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}
		try {
			Wrapper.checkReferenceAlignment(referenceAlignmentFile.getAbsolutePath().toString());
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error loading reference alignment",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}
		try {
			Wrapper.checkEvaluationAlignment(alignmentFile.getAbsolutePath().toString());
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error loading alignment",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}
		
		semanticName = semanticChooser.getSelectedItem().toString();
		try {
			// handle special description of null semantic
			Wrapper.checkSemantic(semanticName.equalsIgnoreCase(NULL_SEMANTIC) ?
						"Null Semantic" : semanticName);
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error loading semantic",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}

		res = null;
		try {
			res = Wrapper.calculate(firstOntologyURI, secondOntologyURI,
					alignmentFile.getAbsolutePath().toString(),
					referenceAlignmentFile.getAbsolutePath().toString(),
					semanticName.equalsIgnoreCase(NULL_SEMANTIC) ?
						"Null Semantic" : semanticName);
		} catch (WrapperException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(),
				"Error computing semantic precision and recall",
				JOptionPane.ERROR_MESSAGE
			);
			return;
		}

		if (semanticName.equalsIgnoreCase(NULL_SEMANTIC)) {
			setStateSavePanel(false);
			setStateViewPanel(false);
			inspectAlignButton.setEnabled(true);
			referenceAlignmentStats.setText(
				Integer.toString(
					res.getOriginalReference().getCorrespondenceCount()
				) +
				" / -"
			);
			alignmentStats.setText(
				Integer.toString(
					res.getOriginalAlignment().getCorrespondenceCount()
				) +
				" / -"
			);
		}
		else {
			setStateSavePanel(true);
			setStateViewPanel(true);
			// set statistics fields
			referenceAlignmentStats.setText(
				Integer.toString(res.getOriginalReference().getCorrespondenceCount())
				+ " / " +
				Integer.toString(res.getReferenceClosure().getCorrespondenceCount())
			);
			alignmentStats.setText(
				Integer.toString(res.getOriginalAlignment().getCorrespondenceCount())
				+ " / " + 
				Integer.toString(res.getEvaluationClosure().getCorrespondenceCount())
			);
		}
		intersectionSize.setText(Integer.toString(res.getIntersection().getCorrespondenceCount()));

		precisionValue.setText(Float.toString(res.getPrecision()));
		recallValue.setText(Float.toString(res.getRecall()));
	}//GEN-LAST:event_computeButtonActionPerformed

	private void inspectAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspectAlignButtonActionPerformed
		new AlignmentFrame(res.getOriginalAlignment(), res.getOriginalReference()).setVisible(true);
}//GEN-LAST:event_inspectAlignButtonActionPerformed

	private void inspectAlignClosureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspectAlignClosureButtonActionPerformed
		new AlignmentFrame(res.getEvaluationClosure(), res.getReferenceClosure()).setVisible(true);
	}//GEN-LAST:event_inspectAlignClosureButtonActionPerformed

	private void saveMergedOntologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMergedOntologyButtonActionPerformed
		JFileChooser fileChooser = null;
		if (lastSavePath == null) {
			fileChooser = new JFileChooser();
		}
		else {
			fileChooser = new JFileChooser(lastSavePath);
		}
		int ret = fileChooser.showSaveDialog(this);

		if (ret == JFileChooser.APPROVE_OPTION) {
			lastSavePath = fileChooser.getCurrentDirectory();
			try {
				OntologyManager.writeOntology(
					res.getCombinedEvOntology(),
					fileChooser.getSelectedFile().getAbsolutePath().toString()
				);
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(this,
						"Error saving merged ontology to file:\n" + ex.getMessage()
						, "Error saving file", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_saveMergedOntologyButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				MainWindow window = new MainWindow();
				window.setStateAlignmentPanel(false);
				window.setStateSavePanel(false);
				window.setStateSemanticPanel(false);
				window.setStateViewPanel(false);
				window.setVisible(true);
			}
		});
	}

	/**
	 * Sets the activity of all elements contained in the alignments panel
	 * @param state state to set
	 */
	public void setStateAlignmentPanel(boolean state) {
		loadReferenceAlignmentButton.setEnabled(state);
		loadAlignmentButton.setEnabled(state);
	}

	/**
	 * Sets the activity of all elements contained in the semantic panel
	 * @param state state to set
	 */
	public void setStateSemanticPanel(boolean state) {
		semanticChooser.setEnabled(state);
		computeButton.setEnabled(state);
	}

	/**
	 * Sets the activity of all elements contained in the save panel
	 * @param state state to set
	 */
	public void setStateSavePanel(boolean state) {
		saveAlignmentClosureButton.setEnabled(state);
		saveMergedReferenceOntologyButton.setEnabled(state);
		saveReferenceAlignmentClosureButton.setEnabled(state);
		saveMergedOntologyButton.setEnabled(state);
	}

	/**
	 * Sets the activity of all elements contained in the view panel
	 * @param state state to set
	 */
	public void setStateViewPanel(boolean state) {
		inspectAlignButton.setEnabled(state);
		inspectAlignClosureButton.setEnabled(state);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JTextField alignmentFileName;
    private javax.swing.JTextField alignmentStats;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField firstOntologyFileName;
    private javax.swing.JButton inspectAlignButton;
    private javax.swing.JButton inspectAlignClosureButton;
    private javax.swing.JTextField intersectionSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton loadAlignmentButton;
    private javax.swing.JButton loadFirstOntologyButton;
    private javax.swing.JButton loadReferenceAlignmentButton;
    private javax.swing.JButton loadSecondOntologyButton;
    private javax.swing.JTextField precisionValue;
    private javax.swing.JTextField recallValue;
    private javax.swing.JTextField referenceAlignmentFileName;
    private javax.swing.JTextField referenceAlignmentStats;
    private javax.swing.JButton saveAlignmentClosureButton;
    private javax.swing.JButton saveMergedOntologyButton;
    private javax.swing.JButton saveMergedReferenceOntologyButton;
    private javax.swing.JButton saveReferenceAlignmentClosureButton;
    private javax.swing.JTextField secondOntologyFileName;
    private javax.swing.JComboBox semanticChooser;
    // End of variables declaration//GEN-END:variables
}
